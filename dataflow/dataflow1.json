{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DSInput",
						"type": "DatasetReference"
					},
					"name": "moviesdatasource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DSOutput",
						"type": "DatasetReference"
					},
					"name": "Uniontablesink"
				}
			],
			"transformations": [
				{
					"name": "Moviesbetween2007and2009"
				},
				{
					"name": "Onlycomedy"
				},
				{
					"name": "Rottentomatos"
				},
				{
					"name": "Gross"
				},
				{
					"name": "Superhits"
				},
				{
					"name": "Gross2"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Film as string,",
				"          Genre as string,",
				"          {Lead Studio} as string,",
				"          {Audience score %} as string,",
				"          Profitability as string,",
				"          {Rotten Tomatoes %} as string,",
				"          {Worldwide Gross} as string,",
				"          Year as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> moviesdatasource",
				"Gross2 filter(toInteger(Year) >= 2007 && toInteger(Year) <=2009) ~> Moviesbetween2007and2009",
				"Moviesbetween2007and2009 filter(in(array('Romance', 'Comedy'), Genre)) ~> Onlycomedy",
				"Onlycomedy filter(toFloat({Rotten Tomatoes %}) > 75) ~> Rottentomatos",
				"moviesdatasource derive({Total Gross} = iif(toFloat(replace({Worldwide Gross}, '$', '')) > 200, 'Super hit', iif(toFloat(replace({Worldwide Gross}, '$', '')) > 50, 'Hit', 'Flop'))) ~> Gross",
				"Gross filter({Total Gross} == 'Super hit') ~> Superhits",
				"moviesdatasource derive({Total Gross} = iif(toFloat(replace({Worldwide Gross}, '$', '')) > 200, 'Super hit', iif(toFloat(replace({Worldwide Gross}, '$', '')) > 50, 'Hit', 'Flop'))) ~> Gross2",
				"Superhits, Rottentomatos union(byName: true)~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Uniontablesink"
			]
		}
	}
}